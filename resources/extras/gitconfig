[user]
	name = Claudio Marchiori
	email = marchiori.c@gmail.com

[alias]

	aa = add --all

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	see-all = log --graph --pretty=oneline --decorate=full --all
	see = ! git log --graph --pretty=oneline --decorate=full ${1:-`git rev-parse --abbrev-ref HEAD`}

	# View the current working tree status using the short format
	s = status -s -b

	# View status using the long format
	st = status

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	
	# Shortcut
	f = fetch
	# -
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive
	rbs = rebase --skip

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av
	cia = commit -av
	cm = commit -m

	# Commit specify file changes
	ci = commit -v
	
	# Amend the currently staged files to the latest commit
	oops = commit --amend --reuse-message=HEAD
	amend = commit --amend --reuse-message=HEAD
	
	# Wordpress commit theme folder
	wp-tpl-ci = commit -v wp-content/themes/

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	co = checkout
	cob = checkout -b

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Clear all modify of project
	nuke = ! git reset --hard && git clean -xfd
	fresh = ! git reset --hard && git clean -fd

	# Undo a `git push`
	undopush = push -f origin HEAD^:master

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	filemode = true

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	editor = vim

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = current

# URL shorthands

# [url "git@github.com:"]
# 
# 	insteadOf = "gh:"
# 	pushInsteadOf = "github:"
# 	pushInsteadOf = "git://github.com/"
# 
# [url "git://github.com/"]
# 
# 	insteadOf = "github:"
# 
# [url "git@gist.github.com:"]
# 
# 	insteadOf = "gst:"
# 	pushInsteadOf = "gist:"
# 	pushInsteadOf = "git://gist.github.com/"
# 
# [url "git://gist.github.com/"]
# 
# 	insteadOf = "gist:"
